public void moveFileThread(ArrayList<StructForFileList> fileList){
    //create thread object
    FileMoveThread[] th = new FileMoveThread[fileList.size()];
    for(int i = 0 ; i < fileList.size() ; ++i){
        th[i] = new FileMoveThread();
        th[i].start();
    }
    
    //check whether threads all stop
    boolean isEnd = false;
    while(!isEnd){
        int finishedThread = 0;
        //sleep
        try{
        Thread.sleep(30000);
        }catch(InterruptedException e){
            e.printStackTrace();
        }
        //check all threads are terminated
        for(int i = 0 ; i < fileList.size() ; ++i){
            if(th[i].getState() == Thread.State.TERMINATED){
                finishedThread++;
            }
        }
        //if all threads are terminated, break the while block
        if(fileList.size() == finishedThread){
            isEnd = true;
        }
        System.out.println("Complete Count: " + finishedThread + " / " + fileList.size());
    }
}

////////////////////////////
//extend thread class part//
////////////////////////////
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;

public class FileMoveThread extends Thread{
    //called when execute FileMoveThread.start()
    public void run(){
        String originPath = ""; //Path of origin
        String targetPath = ""; //Path of target
        
        File originFile = new File(originPath);
        File targetFile = new File(targetPath);
        try{
            FileInputStream fis = new FileInputStream(originFile);
            FileOutputStream fos = new FileOutputStream(copyFile);
            int fileByte = 0;
            while((fileByte = fis.read()) != -1){
                fos.write(fileByte);
            }
        } catch(FileNotFoundException e){
            e.printStackTrace();
        } catch(IOException e){
            e.printStackTrace();
        } finally{
            fis.close();
            fos.close();
        }
    }
}